name: goreleaser

on:
  push:
    branches:
      - 'trunk'
    tags:
      - "v*"
  pull_request:

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Login to Docker Hub
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PS_TOKEN }}

      - name: Generate changelog
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "GORELEASER_CURRENT_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          git fetch --unshallow
          scripts/changelog | tee CHANGELOG.md

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          install-only: true
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Run GoReleaser
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            goreleaser release --release-notes=CHANGELOG.md
          elif [[ $GITHUB_REF == refs/heads/trunk ]]; then
            goreleaser --snapshot
          fi

      - name: Bump Homebrew formula
        uses: mislav/bump-homebrew-formula-action@v1
        if: "!contains(github.ref, '-') && startsWith(github.ref, 'refs/tags/v')" # skip prereleases and run on tags
        with:
          formula-name: glab
        env:
          COMMITTER_TOKEN: ${{ secrets.PS_TOKEN }}

      - name: Move project cards
        continue-on-error: true
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{secrets.BOT_TOKEN}}
          PENDING_RELEASE_COLUMN: 11177289
          DONE_COLUMN: 10210364
        run: |
          api() { gh api -H 'accept: application/vnd.github.inertia-preview+json' "$@"; }
          api-write() { [[ $GITHUB_REF == *-* ]] && echo "skipping: api $*" || api "$@"; }
          cards=$(api --paginate projects/columns/$PENDING_RELEASE_COLUMN/cards | jq ".[].id")
          for card in $cards; do
            api-write --silent projects/columns/cards/$card/moves -f position=top -F column_id=$DONE_COLUMN
          done
          echo "moved ${#cards[@]} cards to the Done column"

  exe-installer:
    needs: goreleaser
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

      - name: Install Build Tools
        run: |
          choco install innosetup make

      - name: Build GLab For Windows
        id: buildwin
        run: |
          make build && Get-ChildItem bin

      - name: Get Latest Version Tag
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Create Installer
        run: |
          $srcDir = Convert-Path .
          Rename-Item -Path $srcDir/bin/glab -NewName glab.exe
          Copy-Item -Path $srcDir/scripts/setup_windows.iss -Destination $srcDir
          iscc "setup_windows.iss" /DVersion=${{steps.get_version.outputs.version-without-v}}

      - name: Generate Hash
        env:
          GITHUB_TOKEN: ${{secrets.BOT_TOKEN}}
        run:
          gh release download -p "checksums.txt";
          echo "$(Get-FileHash ./bin/glab_${{ steps.get_version.outputs.version-without-v }}_Windows_x86_64_installer.exe -Algorithm SHA256 | Select-Object "Hash" | ForEach-Object {$_.Hash})  glab_${{ steps.get_version.outputs.version-without-v }}_Windows_x86_64_installer.exe" >> checksums.txt

      - name: Upload Installer to Release
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{secrets.BOT_TOKEN}}
        run: |
          gh release upload "${{ steps.get_version.outputs.version }}" ./bin/glab_${{ steps.get_version.outputs.version-without-v }}_Windows_x86_64_installer.exe checksums.txt --clobber
